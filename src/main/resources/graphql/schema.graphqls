# This file was generated based on ".graphqlconfig". Do not edit manually.
scalar DateTime

enum SortDirection {
    ASC
    DESC
}

schema {
    query: Query
    mutation: Mutation
}

interface Node {
    id: ID!
}

type PageInfo {
    pageNumber: Int!
    pageSize: Int!
    sortBy: [String]
    sortDirection: SortDirection!
}

input PageInfoInput {
    pageNumber: Int = 0
    pageSize: Int =100
    sortBy: [String]
    sortDirection: SortDirection = ASC
}

type Case implements Node {
    description: String!
    id: ID!
    startedAt: String
    caseType: CaseType!
    caseStatusType: CaseStatusType
    roles(pageInfo: PageInfoInput): CaseRoleConnection
    communicationEvents(pageInfo: PageInfoInput): CommunicationEventConnection
}

type CaseEdge {
    cursor: String!
    node: Case!
}

type CaseConnection {
    edges: [CaseEdge]
    pageInfo: PageInfo!
}

input NewCase {
    description: String!
    startedAt: String!
    caseTypeId: ID!
    caseStatusTypeId: ID!
}

type CaseRole implements Node{
    id: ID!
    caseRoleType: CaseRoleType!
    party: Party!
    fromDate: String
    thruDate: String
}

type CaseRoleEdge {
    cursor: String!
    node: CaseRole!
}

type CaseRoleConnection {
    edges: [CaseRoleEdge]
    pageInfo: PageInfo!
}

input NewCaseRole {
    caseId: ID!
    caseRoleTypeId: ID!
    partyId: ID!
    fromDate: String!
}

type CaseRoleType {
    children: [CaseRoleType]
    description: String!
    id: ID!
    parent: CaseRoleType
}

type CaseStatusType {
    children: [CaseStatusType]
    description: String!
    id: ID!
    parent: CaseStatusType
}

type CaseType {
    children: [CaseType]
    description: String!
    id: ID!
    parent: CaseType
}

type CommunicationEvent implements Node{
    id: ID!
    started: String!
    ended: String
    note: String!
    contactMechanismType: ContactMechanismType!
    communicationEventStatusType: CommunicationEventStatusType!
    communicationEventType: CommunicationEventType!
    partyRelationship: PartyRelationship!
}

input NewCommunicationEvent {
    started: DateTime!
    ended: DateTime
    note: String!
    contactMechanismTypeId: ID!
    communicationEventStatusTypeId: ID!
    communicationEventTypeId: ID!
    partyRelationshipId: ID!
}

type CommunicationEventConnection {
    edges: [CommunicationEventEdge]
    pageInfo: PageInfo
}

type CommunicationEventEdge {
    node: CommunicationEvent!
    cursor: String!
}

type CommunicationEventPurposeType {
    children: [CommunicationEventPurposeType]
    description: String!
    id: ID!
    parent: CommunicationEventPurposeType
}

type CommunicationEventRoleType {
    children: [CommunicationEventRoleType]
    description: String!
    id: ID!
    parent: CommunicationEventRoleType
}

type CommunicationEventStatusType {
    children: [CommunicationEventStatusType]
    description: String!
    id: ID!
    parent: CommunicationEventStatusType
}

type CommunicationEventType {
    children: [CommunicationEventType]
    description: String!
    id: ID!
    parent: CommunicationEventType
}

type ContactMechanism {
    id: ID!
}

type ContactMechanismType {
    children:[ContactMechanismType]
    description: String!
    id: ID!
    parent: ContactMechanismType
}

type FacilityRoleType {
    children: [FacilityRoleType]
    description: String!
    id: ID!
    parent: FacilityRoleType
}

type FacilityType {
    children: [FacilityType]
    description: String!
    id: ID!
    parent: FacilityType
}

type Party {
    id: ID!
}

type PartyRelationship {
    id: ID!
}
type PartyType {
    children: [PartyType]
    description: String!
    id: ID!
    parent: PartyType
}

type Mutation {
    addCaseRole( newCaseRole: NewCaseRole!): Case!
    addCommunicationEventToCase( caseId: ID!, newCommunicationEvent: NewCommunicationEvent!): CommunicationEvent
    expireCaseRole( caseId: ID!, caseRoleId: ID!): Case!
    createCase( newCase: NewCase!) :Case!
}

type Query {
    cases(pageInfo:PageInfoInput): CaseConnection
    caseRoleTypes: [CaseRoleType]
    caseStatusTypes: [CaseStatusType]
    caseTypes: [CaseType]
    communicationEventPurposeTypes: [CommunicationEventPurposeType]
    communicationEventRoleTypes: [CommunicationEventRoleType]
    communicationEventStatusTypes: [CommunicationEventStatusType]
    communicationEventTypes: [CommunicationEventType]
    facilityRoleTypes: [FacilityRoleType]
    facilityTypes: [FacilityType]
    partyTypes: [PartyType]

}
